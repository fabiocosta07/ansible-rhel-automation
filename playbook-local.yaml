- name: MyQuote development environment automation
  hosts: 127.0.0.1
  connection: local
  vars:
    ansible_become_method: sudo
    ansible_become_pass: 123  
    ansible_user: csaaguest
    email: ze@uol.com
    name: ze
    token: token123    
    os_environment:
      - key: CSAA_EMAIL
        value: "{{ email }}"
      - key: CSAA_NAME
        value: "{{ name }}"
      - key: CSAA_GITHUB_TOKEN
        value: "{{ token }}"
    aws_environment:
      - key: AWS_PROFILE
        value: SSO-WebMyPolicyDeveloperRole
      - key: AWS_DEFAULT_REGION
        value: us-west-2

  tasks:
   - name: config csaa vars
     ansible.builtin.lineinfile:
       dest: "~/.bashrc"
       state: present
       regexp: "^{{ item.key }}="
       line: "export {{ item.key }}={{ item.value }}"
     with_items: "{{ os_environment }}"
         
   - name: Turn off Auto-Logout
     ansible.builtin.shell: |
       sed -i -e 's/TMOUT=[[:digit:]]\+/TMOUT=/g' /etc/profile
       sed -i -e 's/TMOUT=[[:digit:]]\+/TMOUT=/g' /etc/bashrc
     become: yes

   - name: Change file/folder default permissions
     ansible.builtin.shell: |
       sed -i -e 's/umask \+[[:digit:]]\+/umask 022/g' /etc/profile
       sed -i -e 's/umask \+[[:digit:]]\+/umask 022/g' /etc/bashrc
     become: yes

   - name: Create a ssh config directory
     ansible.builtin.file:
      path: ~/.ssh
      state: directory
      mode: '0700'

   - name: Create a ssh config file
     ansible.builtin.file:
       path: ~/.ssh/config
       state: touch
       mode: '0700'

   - name: ssh configuration
     ansible.builtin.blockinfile:
       path: ~/.ssh/config
       block: |
         Host github.com
         Hostname ssh.github.com
         Port 443
         User git

   - name: Enabled SSH X11/TCP Forwarding
     ansible.builtin.shell: |
       sed -i -e 's/AllowTcpForwarding no/AllowTcpForwarding yes/g' /etc/ssh/sshd_config
       sed -i -e 's/X11Forwarding no/X11Forwarding yes/g' /etc/ssh/sshd_config
       sh -c 'echo "Compression yes" >> /etc/ssh/sshd_config'
       systemctl reload sshd
     become: yes

   - name: Enable ipv6/4 forwarding
     ansible.builtin.shell: |
       sed -i -e 's/ipv6\.disable=1/ipv6\.disable=0/g' /etc/default/grub
       grub2-mkconfig -o /boot/grub2/grub.cfg
       sed -i -e 's/net\.ipv4\.ip_forward=0/net\.ipv4\.ip_forward=1/g' /etc/sysctl.conf
       sh -c 'echo "net.ipv6.conf.all.forwarding=1" >> /etc/sysctl.conf'
     become: yes

   - name: Install the git package
     ansible.builtin.package:
       name:
         - git
       state: present
     become: yes

   - name: Create a git config file
     ansible.builtin.file:
       path: ~/.gitconfig
       state: touch
       mode: '0700'

   - name: git configuration
     ansible.builtin.blockinfile:
       path: ~/.gitconfig
       block: |
        [core]
            pager = delta
        [interactive]
            diffFilter = delta --color-only
        [delta]
            navigate = true
            side-by-side = true
        [merge]
            conflictstyle = diff3
        [diff]
            colorMoved = default
        [user]
                name = {{ name }}
                email = {{ email }}
        [alias]
                ls = log --color --graph --pretty=format:\"%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset\" --abbrev-commit
                co = checkout
                br = branch
                ci = commit
                st = status
                ll = log --pretty=format:\"%C(yellow)%h%Cred%d %Creset%s%Cblue [%cn]\" --decorate --numstat
        [pull]
                rebase = merges
        [rebase]
                autostash = true
        [status]
                showUntrackedFiles = no

   - name: Check aws cli installation
     ansible.builtin.command: aws --version
     register: result_aws
     ignore_errors: true

   - name: Install AWS CLI 1
     ansible.builtin.shell: |
       curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
       unzip awscliv2.zip
     when: result_aws is failed

   - name: Install AWS CLI 2
     ansible.builtin.shell: |
       ./aws/install
     become: yes
     when: result_aws is failed

   - name: Install AWS CLI 3
     ansible.builtin.shell: |
       rm -rf aws awscliv2.zip
       mkdir ~/.aws
     when: result_aws is failed
     
   - name: Create a aws config directory
     ansible.builtin.file:
      path: ~/.aws
      state: directory
      mode: '0700'

   - name: Create a aws config file
     ansible.builtin.file:
       path: ~/.aws/config
       state: touch
       mode: '0700'     

   - name: AWS CLI configuration
     ansible.builtin.blockinfile:
       path: ~/.aws/config
       block: |
        [default]
        region=us-west-2
        output=json

        [profile SSO-EzQuoteDeveloperRole]
        region=us-west-2
        output=json

        [profile SSO-WebMyPolicyDeveloperRole]
        region=us-west-2
        output=json

   - name: AWS CLI vars configuration
     ansible.builtin.lineinfile:
       dest: "~/.bashrc"
       state: present
       regexp: "^{{ item.key }}="
       line: "export {{ item.key }}={{ item.value }}"
     with_items: "{{ aws_environment }}"

   - name: Check sam cli installation
     ansible.builtin.command: sam --version
     register: result_sam
     ignore_errors: true

   - name: Install AWS SAM 1
     ansible.builtin.shell: |
       wget "https://github.com/aws/aws-sam-cli/releases/latest/download/aws-sam-cli-linux-x86_64.zip"
       unzip aws-sam-cli-linux-x86_64.zip -d sam-installation
     when: result_sam is failed

   - name: Install AWS SAM 2
     ansible.builtin.shell: |
       ./sam-installation/install
     become: yes
     when: result_sam is failed

   - name: Install AWS SAM 3
     ansible.builtin.shell: |
       rm -rf sam-installation aws-sam-cli-linux-x86_64.zip
     when: result_sam is failed

   - name: Install python3
     ansible.builtin.package:
       name:
         - python3
       state: present
     become: yes

   - name: Install gimme-aws-creds
     ansible.builtin.shell: |
       python3 -m pip install --upgrade pip --user
       python3 -m pip install --upgrade gimme-aws-creds --user

   - name: Create octa config file
     ansible.builtin.file:
       path: ~/.okta_aws_login_config
       state: touch
       mode: u=rw,g=r,o=r

   - name: Add octa configuration to file
     ansible.builtin.blockinfile:
       path: ~/.okta_aws_login_config
       block: |
        okta_org_url = https://csaa.okta.com
        okta_auth_server =
        client_id =
        gimme_creds_server = appurl
        aws_appname =
        aws_rolename = all
        write_aws_creds = True
        cred_profile = role
        okta_username = {{ email }}
        app_url = https://csaa.okta.com/home/amazon_aws/0oa1i1pttchsfI6u40h8/272
        resolve_aws_alias = False
        include_path = False
        preferred_mfa_type = token:software:totp
        remember_device = False
        aws_default_duration = 3600
        device_token =
        output_format = json

   - name: Install gcc-c++
     ansible.builtin.package:
       name:
         - gcc-c++
       state: present
     become: yes

   - name: Install nvm
     ansible.builtin.shell: >
      curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
     args:
       creates: "{{ ansible_env.HOME }}/.nvm/nvm.sh"

   - name: Install npm - lts/fermium
     ansible.builtin.shell: |
      source ~/.nvm/nvm.sh
      nvm install lts/fermium

   - name: Configure npm - lts/fermium
     ansible.builtin.shell: |
      source ~/.nvm/nvm.sh
      npm set //npm.pkg.github.com/:_authToken ${CSAA_GITHUB_TOKEN}
      npm completion >> ~/.bashrc

   - name: Remove the default docker packages
     ansible.builtin.package:
       name:
         - docker
         - docker-client
         - docker-client-latest
         - docker-common
         - docker-latest
         - docker-latest-logrotate
         - docker-logrotate
         - docker-engine
       state: absent
     become: yes

   - name: Install yum-utils
     ansible.builtin.package:
       name:
         - yum-utils 
       state: present
     become: yes

   - name: Remove conflicting packages for docker
     ansible.builtin.package:
       name:
         - podman
         - buildah
       state: absent
     become: yes

   - name: Add docker repo
     ansible.builtin.shell: |
       yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
     become: yes     

   - name: Install the docker packages
     ansible.builtin.package:
       name:
         - docker-ce 
         - docker-ce-cli 
         - containerd.io
       state: present
     become: yes

   - name: Check docker configuration
     ansible.builtin.command: docker network inspect lambda-local
     register: result_docker_config
     ignore_errors: true
     become: yes

   - name: Config docker
     ansible.builtin.shell: |
       usermod -aG docker $USER
       systemctl enable docker
       systemctl start docker
     become: yes
     when: result_docker_config is failed
     
   - name: Config lambda-local docker network
     ansible.builtin.shell: |
       docker network create lambda-local
     become: yes
     ignore_errors: true

